#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub(crate) enum CountryCode {
    AD,
    AE,
    AF,
    AG,
    AI,
    AL,
    AM,
    AO,
    AQ,
    AR,
    AS,
    AT,
    AU,
    AW,
    AX,
    AZ,
    BA,
    BB,
    BD,
    BE,
    BF,
    BG,
    BH,
    BI,
    BJ,
    BL,
    BM,
    BN,
    BO,
    BQ,
    BR,
    BS,
    BT,
    BV,
    BW,
    BY,
    BZ,
    CA,
    CC,
    CD,
    CF,
    CG,
    CH,
    CI,
    CK,
    CL,
    CM,
    CN,
    CO,
    CR,
    CU,
    CV,
    CW,
    CX,
    CY,
    CZ,
    DE,
    DJ,
    DK,
    DM,
    DO,
    DZ,
    EC,
    EE,
    EG,
    EH,
    ER,
    ES,
    ET,
    FI,
    FJ,
    FK,
    FM,
    FO,
    FR,
    GA,
    GB,
    GD,
    GE,
    GF,
    GG,
    GH,
    GI,
    GL,
    GM,
    GN,
    GP,
    GQ,
    GR,
    GS,
    GT,
    GU,
    GW,
    GY,
    HK,
    HM,
    HN,
    HR,
    HT,
    HU,
    ID,
    IE,
    IL,
    IM,
    IN,
    IO,
    IQ,
    IR,
    IS,
    IT,
    JE,
    JM,
    JO,
    JP,
    KE,
    KG,
    KH,
    KI,
    KM,
    KN,
    KP,
    KR,
    KW,
    KY,
    KZ,
    LA,
    LB,
    LC,
    LI,
    LK,
    LR,
    LS,
    LT,
    LU,
    LV,
    LY,
    MA,
    MC,
    MD,
    ME,
    MF,
    MG,
    MH,
    MK,
    ML,
    MM,
    MN,
    MO,
    MP,
    MQ,
    MR,
    MS,
    MT,
    MU,
    MV,
    MW,
    MX,
    MY,
    MZ,
    NA,
    NC,
    NE,
    NF,
    NG,
    NI,
    NL,
    NO,
    NP,
    NR,
    NU,
    NZ,
    OM,
    PA,
    PE,
    PF,
    PG,
    PH,
    PK,
    PL,
    PM,
    PN,
    PR,
    PS,
    PT,
    PW,
    PY,
    QA,
    RE,
    RO,
    RS,
    RU,
    RW,
    SA,
    SB,
    SC,
    SD,
    SE,
    SG,
    SH,
    SI,
    SJ,
    SK,
    SL,
    SM,
    SN,
    SO,
    SR,
    SS,
    ST,
    SV,
    SX,
    SY,
    SZ,
    TC,
    TD,
    TF,
    TG,
    TH,
    TJ,
    TK,
    TL,
    TM,
    TN,
    TO,
    TR,
    TT,
    TV,
    TW,
    TZ,
    UA,
    UG,
    UM,
    US,
    UY,
    UZ,
    VA,
    VC,
    VE,
    VG,
    VI,
    VN,
    VU,
    WF,
    WS,
    XK,
    YE,
    YT,
    ZA,
    ZM,
    ZW,
}

impl CountryCode {
    pub fn name(&self) -> &'static str {
        use CountryCode::*;
        match self {
            AD => "Andorra",
            AE => "United Arab Emirates",
            AF => "Afghanistan",
            AG => "Antigua and Barbuda",
            AI => "Anguilla",
            AL => "Albania",
            AM => "Armenia",
            AO => "Angola",
            AQ => "Antarctica",
            AR => "Argentina",
            AS => "American Samoa",
            AT => "Austria",
            AU => "Australia",
            AW => "Aruba",
            AX => "Aland Islands",
            AZ => "Azerbaijan",
            BA => "Bosnia and Herzegovina",
            BB => "Barbados",
            BD => "Bangladesh",
            BE => "Belgium",
            BF => "Burkina Faso",
            BG => "Bulgaria",
            BH => "Bahrain",
            BI => "Burundi",
            BJ => "Benin",
            BL => "Saint Barthelemy",
            BM => "Bermuda",
            BN => "Brunei",
            BO => "Bolivia",
            BQ => "Bonaire, Saint Eustatius and Saba ",
            BR => "Brazil",
            BS => "Bahamas",
            BT => "Bhutan",
            BV => "Bouvet Island",
            BW => "Botswana",
            BY => "Belarus",
            BZ => "Belize",
            CA => "Canada",
            CC => "Cocos Islands",
            CD => "Democratic Republic of the Congo",
            CF => "Central African Republic",
            CG => "Republic of the Congo",
            CH => "Switzerland",
            CI => "Ivory Coast",
            CK => "Cook Islands",
            CL => "Chile",
            CM => "Cameroon",
            CN => "China",
            CO => "Colombia",
            CR => "Costa Rica",
            CU => "Cuba",
            CV => "Cape Verde",
            CW => "Curacao",
            CX => "Christmas Island",
            CY => "Cyprus",
            CZ => "Czech Republic",
            DE => "Germany",
            DJ => "Djibouti",
            DK => "Denmark",
            DM => "Dominica",
            DO => "Dominican Republic",
            DZ => "Algeria",
            EC => "Ecuador",
            EE => "Estonia",
            EG => "Egypt",
            EH => "Western Sahara",
            ER => "Eritrea",
            ES => "Spain",
            ET => "Ethiopia",
            FI => "Finland",
            FJ => "Fiji",
            FK => "Falkland Islands",
            FM => "Micronesia",
            FO => "Faroe Islands",
            FR => "France",
            GA => "Gabon",
            GB => "United Kingdom",
            GD => "Grenada",
            GE => "Georgia",
            GF => "French Guiana",
            GG => "Guernsey",
            GH => "Ghana",
            GI => "Gibraltar",
            GL => "Greenland",
            GM => "Gambia",
            GN => "Guinea",
            GP => "Guadeloupe",
            GQ => "Equatorial Guinea",
            GR => "Greece",
            GS => "South Georgia and the South Sandwich Islands",
            GT => "Guatemala",
            GU => "Guam",
            GW => "Guinea-Bissau",
            GY => "Guyana",
            HK => "Hong Kong",
            HM => "Heard Island and McDonald Islands",
            HN => "Honduras",
            HR => "Croatia",
            HT => "Haiti",
            HU => "Hungary",
            ID => "Indonesia",
            IE => "Ireland",
            IL => "Israel",
            IM => "Isle of Man",
            IN => "India",
            IO => "British Indian Ocean Territory",
            IQ => "Iraq",
            IR => "Iran",
            IS => "Iceland",
            IT => "Italy",
            JE => "Jersey",
            JM => "Jamaica",
            JO => "Jordan",
            JP => "Japan",
            KE => "Kenya",
            KG => "Kyrgyzstan",
            KH => "Cambodia",
            KI => "Kiribati",
            KM => "Comoros",
            KN => "Saint Kitts and Nevis",
            KP => "North Korea",
            KR => "South Korea",
            KW => "Kuwait",
            KY => "Cayman Islands",
            KZ => "Kazakhstan",
            LA => "Laos",
            LB => "Lebanon",
            LC => "Saint Lucia",
            LI => "Liechtenstein",
            LK => "Sri Lanka",
            LR => "Liberia",
            LS => "Lesotho",
            LT => "Lithuania",
            LU => "Luxembourg",
            LV => "Latvia",
            LY => "Libya",
            MA => "Morocco",
            MC => "Monaco",
            MD => "Moldova",
            ME => "Montenegro",
            MF => "Saint Martin",
            MG => "Madagascar",
            MH => "Marshall Islands",
            MK => "Macedonia",
            ML => "Mali",
            MM => "Myanmar",
            MN => "Mongolia",
            MO => "Macao",
            MP => "Northern Mariana Islands",
            MQ => "Martinique",
            MR => "Mauritania",
            MS => "Montserrat",
            MT => "Malta",
            MU => "Mauritius",
            MV => "Maldives",
            MW => "Malawi",
            MX => "Mexico",
            MY => "Malaysia",
            MZ => "Mozambique",
            NA => "Namibia",
            NC => "New Caledonia",
            NE => "Niger",
            NF => "Norfolk Island",
            NG => "Nigeria",
            NI => "Nicaragua",
            NL => "Netherlands",
            NO => "Norway",
            NP => "Nepal",
            NR => "Nauru",
            NU => "Niue",
            NZ => "New Zealand",
            OM => "Oman",
            PA => "Panama",
            PE => "Peru",
            PF => "French Polynesia",
            PG => "Papua New Guinea",
            PH => "Philippines",
            PK => "Pakistan",
            PL => "Poland",
            PM => "Saint Pierre and Miquelon",
            PN => "Pitcairn",
            PR => "Puerto Rico",
            PS => "Palestinian Territory",
            PT => "Portugal",
            PW => "Palau",
            PY => "Paraguay",
            QA => "Qatar",
            RE => "Reunion",
            RO => "Romania",
            RS => "Serbia",
            RU => "Russia",
            RW => "Rwanda",
            SA => "Saudi Arabia",
            SB => "Solomon Islands",
            SC => "Seychelles",
            SD => "Sudan",
            SE => "Sweden",
            SG => "Singapore",
            SH => "Saint Helena",
            SI => "Slovenia",
            SJ => "Svalbard and Jan Mayen",
            SK => "Slovakia",
            SL => "Sierra Leone",
            SM => "San Marino",
            SN => "Senegal",
            SO => "Somalia",
            SR => "Suriname",
            SS => "South Sudan",
            ST => "Sao Tome and Principe",
            SV => "El Salvador",
            SX => "Sint Maarten",
            SY => "Syria",
            SZ => "Swaziland",
            TC => "Turks and Caicos Islands",
            TD => "Chad",
            TF => "French Southern Territories",
            TG => "Togo",
            TH => "Thailand",
            TJ => "Tajikistan",
            TK => "Tokelau",
            TL => "East Timor",
            TM => "Turkmenistan",
            TN => "Tunisia",
            TO => "Tonga",
            TR => "Turkey",
            TT => "Trinidad and Tobago",
            TV => "Tuvalu",
            TW => "Taiwan",
            TZ => "Tanzania",
            UA => "Ukraine",
            UG => "Uganda",
            UM => "United States Minor Outlying Islands",
            US => "United States",
            UY => "Uruguay",
            UZ => "Uzbekistan",
            VA => "Vatican",
            VC => "Saint Vincent and the Grenadines",
            VE => "Venezuela",
            VG => "British Virgin Islands",
            VI => "U.S. Virgin Islands",
            VN => "Vietnam",
            VU => "Vanuatu",
            WF => "Wallis and Futuna",
            WS => "Samoa",
            XK => "Kosovo",
            YE => "Yemen",
            YT => "Mayotte",
            ZA => "South Africa",
            ZM => "Zambia",
            ZW => "Zimbabwe",
        }
    }
}

pub(crate) struct InvalidCountryCode(String);

impl TryFrom<&str> for CountryCode {
    type Error = InvalidCountryCode;

    fn try_from(input: &str) -> Result<Self, Self::Error> {
        match input.to_uppercase().as_str() {
            "AD" => Ok(CountryCode::AD),
            "AE" => Ok(CountryCode::AE),
            "AF" => Ok(CountryCode::AF),
            "AG" => Ok(CountryCode::AG),
            "AI" => Ok(CountryCode::AI),
            "AL" => Ok(CountryCode::AL),
            "AM" => Ok(CountryCode::AM),
            "AO" => Ok(CountryCode::AO),
            "AQ" => Ok(CountryCode::AQ),
            "AR" => Ok(CountryCode::AR),
            "AS" => Ok(CountryCode::AS),
            "AT" => Ok(CountryCode::AT),
            "AU" => Ok(CountryCode::AU),
            "AW" => Ok(CountryCode::AW),
            "AX" => Ok(CountryCode::AX),
            "AZ" => Ok(CountryCode::AZ),
            "BA" => Ok(CountryCode::BA),
            "BB" => Ok(CountryCode::BB),
            "BD" => Ok(CountryCode::BD),
            "BE" => Ok(CountryCode::BE),
            "BF" => Ok(CountryCode::BF),
            "BG" => Ok(CountryCode::BG),
            "BH" => Ok(CountryCode::BH),
            "BI" => Ok(CountryCode::BI),
            "BJ" => Ok(CountryCode::BJ),
            "BL" => Ok(CountryCode::BL),
            "BM" => Ok(CountryCode::BM),
            "BN" => Ok(CountryCode::BN),
            "BO" => Ok(CountryCode::BO),
            "BQ" => Ok(CountryCode::BQ),
            "BR" => Ok(CountryCode::BR),
            "BS" => Ok(CountryCode::BS),
            "BT" => Ok(CountryCode::BT),
            "BV" => Ok(CountryCode::BV),
            "BW" => Ok(CountryCode::BW),
            "BY" => Ok(CountryCode::BY),
            "BZ" => Ok(CountryCode::BZ),
            "CA" => Ok(CountryCode::CA),
            "CC" => Ok(CountryCode::CC),
            "CD" => Ok(CountryCode::CD),
            "CF" => Ok(CountryCode::CF),
            "CG" => Ok(CountryCode::CG),
            "CH" => Ok(CountryCode::CH),
            "CI" => Ok(CountryCode::CI),
            "CK" => Ok(CountryCode::CK),
            "CL" => Ok(CountryCode::CL),
            "CM" => Ok(CountryCode::CM),
            "CN" => Ok(CountryCode::CN),
            "CO" => Ok(CountryCode::CO),
            "CR" => Ok(CountryCode::CR),
            "CU" => Ok(CountryCode::CU),
            "CV" => Ok(CountryCode::CV),
            "CW" => Ok(CountryCode::CW),
            "CX" => Ok(CountryCode::CX),
            "CY" => Ok(CountryCode::CY),
            "CZ" => Ok(CountryCode::CZ),
            "DE" => Ok(CountryCode::DE),
            "DJ" => Ok(CountryCode::DJ),
            "DK" => Ok(CountryCode::DK),
            "DM" => Ok(CountryCode::DM),
            "DO" => Ok(CountryCode::DO),
            "DZ" => Ok(CountryCode::DZ),
            "EC" => Ok(CountryCode::EC),
            "EE" => Ok(CountryCode::EE),
            "EG" => Ok(CountryCode::EG),
            "EH" => Ok(CountryCode::EH),
            "ER" => Ok(CountryCode::ER),
            "ES" => Ok(CountryCode::ES),
            "ET" => Ok(CountryCode::ET),
            "FI" => Ok(CountryCode::FI),
            "FJ" => Ok(CountryCode::FJ),
            "FK" => Ok(CountryCode::FK),
            "FM" => Ok(CountryCode::FM),
            "FO" => Ok(CountryCode::FO),
            "FR" => Ok(CountryCode::FR),
            "GA" => Ok(CountryCode::GA),
            "GB" => Ok(CountryCode::GB),
            "GD" => Ok(CountryCode::GD),
            "GE" => Ok(CountryCode::GE),
            "GF" => Ok(CountryCode::GF),
            "GG" => Ok(CountryCode::GG),
            "GH" => Ok(CountryCode::GH),
            "GI" => Ok(CountryCode::GI),
            "GL" => Ok(CountryCode::GL),
            "GM" => Ok(CountryCode::GM),
            "GN" => Ok(CountryCode::GN),
            "GP" => Ok(CountryCode::GP),
            "GQ" => Ok(CountryCode::GQ),
            "GR" => Ok(CountryCode::GR),
            "GS" => Ok(CountryCode::GS),
            "GT" => Ok(CountryCode::GT),
            "GU" => Ok(CountryCode::GU),
            "GW" => Ok(CountryCode::GW),
            "GY" => Ok(CountryCode::GY),
            "HK" => Ok(CountryCode::HK),
            "HM" => Ok(CountryCode::HM),
            "HN" => Ok(CountryCode::HN),
            "HR" => Ok(CountryCode::HR),
            "HT" => Ok(CountryCode::HT),
            "HU" => Ok(CountryCode::HU),
            "ID" => Ok(CountryCode::ID),
            "IE" => Ok(CountryCode::IE),
            "IL" => Ok(CountryCode::IL),
            "IM" => Ok(CountryCode::IM),
            "IN" => Ok(CountryCode::IN),
            "IO" => Ok(CountryCode::IO),
            "IQ" => Ok(CountryCode::IQ),
            "IR" => Ok(CountryCode::IR),
            "IS" => Ok(CountryCode::IS),
            "IT" => Ok(CountryCode::IT),
            "JE" => Ok(CountryCode::JE),
            "JM" => Ok(CountryCode::JM),
            "JO" => Ok(CountryCode::JO),
            "JP" => Ok(CountryCode::JP),
            "KE" => Ok(CountryCode::KE),
            "KG" => Ok(CountryCode::KG),
            "KH" => Ok(CountryCode::KH),
            "KI" => Ok(CountryCode::KI),
            "KM" => Ok(CountryCode::KM),
            "KN" => Ok(CountryCode::KN),
            "KP" => Ok(CountryCode::KP),
            "KR" => Ok(CountryCode::KR),
            "KW" => Ok(CountryCode::KW),
            "KY" => Ok(CountryCode::KY),
            "KZ" => Ok(CountryCode::KZ),
            "LA" => Ok(CountryCode::LA),
            "LB" => Ok(CountryCode::LB),
            "LC" => Ok(CountryCode::LC),
            "LI" => Ok(CountryCode::LI),
            "LK" => Ok(CountryCode::LK),
            "LR" => Ok(CountryCode::LR),
            "LS" => Ok(CountryCode::LS),
            "LT" => Ok(CountryCode::LT),
            "LU" => Ok(CountryCode::LU),
            "LV" => Ok(CountryCode::LV),
            "LY" => Ok(CountryCode::LY),
            "MA" => Ok(CountryCode::MA),
            "MC" => Ok(CountryCode::MC),
            "MD" => Ok(CountryCode::MD),
            "ME" => Ok(CountryCode::ME),
            "MF" => Ok(CountryCode::MF),
            "MG" => Ok(CountryCode::MG),
            "MH" => Ok(CountryCode::MH),
            "MK" => Ok(CountryCode::MK),
            "ML" => Ok(CountryCode::ML),
            "MM" => Ok(CountryCode::MM),
            "MN" => Ok(CountryCode::MN),
            "MO" => Ok(CountryCode::MO),
            "MP" => Ok(CountryCode::MP),
            "MQ" => Ok(CountryCode::MQ),
            "MR" => Ok(CountryCode::MR),
            "MS" => Ok(CountryCode::MS),
            "MT" => Ok(CountryCode::MT),
            "MU" => Ok(CountryCode::MU),
            "MV" => Ok(CountryCode::MV),
            "MW" => Ok(CountryCode::MW),
            "MX" => Ok(CountryCode::MX),
            "MY" => Ok(CountryCode::MY),
            "MZ" => Ok(CountryCode::MZ),
            "NA" => Ok(CountryCode::NA),
            "NC" => Ok(CountryCode::NC),
            "NE" => Ok(CountryCode::NE),
            "NF" => Ok(CountryCode::NF),
            "NG" => Ok(CountryCode::NG),
            "NI" => Ok(CountryCode::NI),
            "NL" => Ok(CountryCode::NL),
            "NO" => Ok(CountryCode::NO),
            "NP" => Ok(CountryCode::NP),
            "NR" => Ok(CountryCode::NR),
            "NU" => Ok(CountryCode::NU),
            "NZ" => Ok(CountryCode::NZ),
            "OM" => Ok(CountryCode::OM),
            "PA" => Ok(CountryCode::PA),
            "PE" => Ok(CountryCode::PE),
            "PF" => Ok(CountryCode::PF),
            "PG" => Ok(CountryCode::PG),
            "PH" => Ok(CountryCode::PH),
            "PK" => Ok(CountryCode::PK),
            "PL" => Ok(CountryCode::PL),
            "PM" => Ok(CountryCode::PM),
            "PN" => Ok(CountryCode::PN),
            "PR" => Ok(CountryCode::PR),
            "PS" => Ok(CountryCode::PS),
            "PT" => Ok(CountryCode::PT),
            "PW" => Ok(CountryCode::PW),
            "PY" => Ok(CountryCode::PY),
            "QA" => Ok(CountryCode::QA),
            "RE" => Ok(CountryCode::RE),
            "RO" => Ok(CountryCode::RO),
            "RS" => Ok(CountryCode::RS),
            "RU" => Ok(CountryCode::RU),
            "RW" => Ok(CountryCode::RW),
            "SA" => Ok(CountryCode::SA),
            "SB" => Ok(CountryCode::SB),
            "SC" => Ok(CountryCode::SC),
            "SD" => Ok(CountryCode::SD),
            "SE" => Ok(CountryCode::SE),
            "SG" => Ok(CountryCode::SG),
            "SH" => Ok(CountryCode::SH),
            "SI" => Ok(CountryCode::SI),
            "SJ" => Ok(CountryCode::SJ),
            "SK" => Ok(CountryCode::SK),
            "SL" => Ok(CountryCode::SL),
            "SM" => Ok(CountryCode::SM),
            "SN" => Ok(CountryCode::SN),
            "SO" => Ok(CountryCode::SO),
            "SR" => Ok(CountryCode::SR),
            "SS" => Ok(CountryCode::SS),
            "ST" => Ok(CountryCode::ST),
            "SV" => Ok(CountryCode::SV),
            "SX" => Ok(CountryCode::SX),
            "SY" => Ok(CountryCode::SY),
            "SZ" => Ok(CountryCode::SZ),
            "TC" => Ok(CountryCode::TC),
            "TD" => Ok(CountryCode::TD),
            "TF" => Ok(CountryCode::TF),
            "TG" => Ok(CountryCode::TG),
            "TH" => Ok(CountryCode::TH),
            "TJ" => Ok(CountryCode::TJ),
            "TK" => Ok(CountryCode::TK),
            "TL" => Ok(CountryCode::TL),
            "TM" => Ok(CountryCode::TM),
            "TN" => Ok(CountryCode::TN),
            "TO" => Ok(CountryCode::TO),
            "TR" => Ok(CountryCode::TR),
            "TT" => Ok(CountryCode::TT),
            "TV" => Ok(CountryCode::TV),
            "TW" => Ok(CountryCode::TW),
            "TZ" => Ok(CountryCode::TZ),
            "UA" => Ok(CountryCode::UA),
            "UG" => Ok(CountryCode::UG),
            "UM" => Ok(CountryCode::UM),
            "US" => Ok(CountryCode::US),
            "UY" => Ok(CountryCode::UY),
            "UZ" => Ok(CountryCode::UZ),
            "VA" => Ok(CountryCode::VA),
            "VC" => Ok(CountryCode::VC),
            "VE" => Ok(CountryCode::VE),
            "VG" => Ok(CountryCode::VG),
            "VI" => Ok(CountryCode::VI),
            "VN" => Ok(CountryCode::VN),
            "VU" => Ok(CountryCode::VU),
            "WF" => Ok(CountryCode::WF),
            "WS" => Ok(CountryCode::WS),
            "XK" => Ok(CountryCode::XK),
            "YE" => Ok(CountryCode::YE),
            "YT" => Ok(CountryCode::YT),
            "ZA" => Ok(CountryCode::ZA),
            "ZM" => Ok(CountryCode::ZM),
            "ZW" => Ok(CountryCode::ZW),
            _ => Err(InvalidCountryCode(input.to_string())),
        }
    }
}
