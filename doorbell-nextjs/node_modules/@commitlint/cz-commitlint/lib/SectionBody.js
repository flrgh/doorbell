"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineCommitMessage = exports.getQuestions = void 0;
const word_wrap_1 = __importDefault(require("word-wrap"));
const Question_1 = __importDefault(require("./Question"));
const getRuleQuestionConfig_1 = __importDefault(require("./services/getRuleQuestionConfig"));
const rules_1 = require("./store/rules");
const leading_blank_fn_1 = __importDefault(require("./utils/leading-blank-fn"));
const rules_2 = require("./utils/rules");
function getQuestions() {
    // body
    const questionConfig = (0, getRuleQuestionConfig_1.default)('body');
    if (!questionConfig)
        return [];
    else
        return [new Question_1.default('body', questionConfig).question];
}
exports.getQuestions = getQuestions;
function combineCommitMessage(answers) {
    const maxLineLength = (0, rules_2.getMaxLength)((0, rules_1.getRule)('body', 'max-line-length'));
    const leadingBlankFn = (0, leading_blank_fn_1.default)((0, rules_1.getRule)('body', 'leading-blank'));
    const { body, breakingBody, issuesBody } = answers;
    const commitBody = body || breakingBody || issuesBody || '';
    if (commitBody) {
        return leadingBlankFn(maxLineLength < Infinity
            ? (0, word_wrap_1.default)(commitBody, {
                width: maxLineLength,
                trim: true,
                indent: '',
            })
            : commitBody.trim());
    }
    else {
        return '';
    }
}
exports.combineCommitMessage = combineCommitMessage;
//# sourceMappingURL=SectionBody.js.map