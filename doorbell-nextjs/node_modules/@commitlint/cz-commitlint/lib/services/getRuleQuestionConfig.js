"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompts_1 = require("../store/prompts");
const rules_1 = require("../store/rules");
const case_fn_1 = __importDefault(require("../utils/case-fn"));
const full_stop_fn_1 = __importDefault(require("../utils/full-stop-fn"));
const rules_2 = require("../utils/rules");
function default_1(rulePrefix) {
    var _a;
    const questions = (0, prompts_1.getPromptQuestions)();
    const questionSettings = questions[rulePrefix];
    const emptyRule = (0, rules_1.getRule)(rulePrefix, 'empty');
    const mustBeEmpty = emptyRule && (0, rules_2.ruleIsActive)(emptyRule) && (0, rules_2.ruleIsApplicable)(emptyRule);
    if (mustBeEmpty) {
        return null;
    }
    const canBeSkip = !emptyRule || (0, rules_2.ruleIsDisabled)(emptyRule);
    const enumRule = (0, rules_1.getRule)(rulePrefix, 'enum');
    const enumRuleList = enumRule && (0, rules_2.enumRuleIsActive)(enumRule) ? (0, rules_2.getEnumList)(enumRule) : null;
    let enumList;
    if (enumRuleList) {
        const enumDescriptions = questionSettings === null || questionSettings === void 0 ? void 0 : questionSettings['enum'];
        if (enumDescriptions) {
            const enumNames = Object.keys(enumDescriptions);
            const longest = Math.max(...enumRuleList.map((enumName) => enumName.length));
            // TODO emoji + title
            enumList = enumRuleList
                .sort((a, b) => enumNames.indexOf(a) - enumNames.indexOf(b))
                .map((enumName) => {
                var _a;
                const enumDescription = (_a = enumDescriptions[enumName]) === null || _a === void 0 ? void 0 : _a.description;
                if (enumDescription) {
                    return {
                        name: `${enumName}:`.padEnd(longest + 4) + enumDescription,
                        value: enumName,
                        short: enumName,
                    };
                }
                else {
                    return enumName;
                }
            });
        }
        else {
            enumList = [...enumRuleList];
        }
    }
    return {
        skip: canBeSkip,
        enumList,
        title: (_a = questionSettings === null || questionSettings === void 0 ? void 0 : questionSettings['description']) !== null && _a !== void 0 ? _a : `${rulePrefix}:`,
        caseFn: (0, case_fn_1.default)((0, rules_1.getRule)(rulePrefix, 'case')),
        fullStopFn: (0, full_stop_fn_1.default)((0, rules_1.getRule)(rulePrefix, 'full-stop')),
        minLength: (0, rules_2.getMinLength)((0, rules_1.getRule)(rulePrefix, 'min-length')),
        maxLength: (0, rules_2.getMaxLength)((0, rules_1.getRule)(rulePrefix, 'max-length')),
        messages: (0, prompts_1.getPromptMessages)(),
    };
}
exports.default = default_1;
//# sourceMappingURL=getRuleQuestionConfig.js.map