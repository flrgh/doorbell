"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@commitlint/types");
const full_stop_fn_1 = __importDefault(require("./full-stop-fn"));
test('should not apply', () => {
    let rule = (0, full_stop_fn_1.default)([types_1.RuleConfigSeverity.Disabled]);
    expect(rule('test.')).toBe('test.');
    expect(rule('test')).toBe('test');
    expect(rule('test..')).toBe('test..');
    expect(rule('')).toBe('');
    rule = (0, full_stop_fn_1.default)();
    expect(rule('test.')).toBe('test.');
    expect(rule('test')).toBe('test');
    expect(rule('test..')).toBe('test..');
    expect(rule('')).toBe('');
    rule = (0, full_stop_fn_1.default)([types_1.RuleConfigSeverity.Disabled, 'always']);
    expect(rule('test.')).toBe('test.');
    expect(rule('test')).toBe('test');
    expect(rule('test..')).toBe('test..');
    expect(rule('')).toBe('');
    rule = (0, full_stop_fn_1.default)([types_1.RuleConfigSeverity.Disabled, 'always', 1]);
    expect(rule('test.')).toBe('test.');
    expect(rule('test')).toBe('test');
    expect(rule('test..')).toBe('test..');
    expect(rule('')).toBe('');
    rule = (0, full_stop_fn_1.default)([types_1.RuleConfigSeverity.Disabled, 'never']);
    expect(rule('test.')).toBe('test.');
    expect(rule('test')).toBe('test');
    expect(rule('test..')).toBe('test..');
    expect(rule('')).toBe('');
    rule = (0, full_stop_fn_1.default)([types_1.RuleConfigSeverity.Disabled, 'never', ['.']]);
    expect(rule('test.')).toBe('test.');
    expect(rule('test')).toBe('test');
    expect(rule('test..')).toBe('test..');
    expect(rule('')).toBe('');
});
test('should add full stop', () => {
    let rule = (0, full_stop_fn_1.default)([types_1.RuleConfigSeverity.Error, 'always', '.']);
    expect(rule('test')).toBe('test.');
    expect(rule('test.')).toBe('test.');
    expect(rule('')).toBe('.');
    rule = (0, full_stop_fn_1.default)([types_1.RuleConfigSeverity.Error, 'always', '\n']);
    expect(rule('test')).toBe('test\n');
    expect(rule('test.')).toBe('test.\n');
    expect(rule('')).toBe('\n');
});
test('should remove full stop', () => {
    let rule = (0, full_stop_fn_1.default)([types_1.RuleConfigSeverity.Error, 'never', '.']);
    expect(rule('test')).toBe('test');
    expect(rule('test.')).toBe('test');
    expect(rule('')).toBe('');
    expect(rule('test..')).toBe('test');
    expect(rule('test.end')).toBe('test.end');
    rule = (0, full_stop_fn_1.default)([types_1.RuleConfigSeverity.Error, 'never', '\n']);
    expect(rule('test')).toBe('test');
    expect(rule('test.')).toBe('test.');
    expect(rule('test\n\n')).toBe('test');
    expect(rule('test.\n')).toBe('test.');
});
//# sourceMappingURL=full-stop-fn-test.js.map